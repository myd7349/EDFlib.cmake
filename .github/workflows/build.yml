name: EDFlib

on:
  push:
  pull_request:
    types: [ opened, ready_for_review, reopened, synchronize ]

env:
  EDFLIB_VERSION: v1.27
  BUILD_TYPE: Release
  INSTALL_PREFIX: install

jobs:
  build-android:
    name: build-${{ matrix.config.rid }}-${{ matrix.linkage }}
    if: >-
      github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - rid: android-arm
            abi: armeabi-v7a

          - rid: android-arm64
            abi: arm64-v8a

          - rid: android-x64
            abi: x86_64

          - rid: android-x86
            abi: x86
        linkage: [ dynamic, static ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone EDFlib
        run: |
          git clone https://gitlab.com/Teuniz/EDFlib.git
          pushd EDFlib
          git checkout ${{ env.EDFLIB_VERSION }}
          popd

      - name: Copy CMakeLists.txt
        run: |
          cp CMakeLists.txt ./EDFlib

      - name: Run uname
        run: uname -a

      - name: Configure
        run: >
          cmake
          -S EDFlib
          -B build
          ${{ matrix.linkage == 'dynamic' && '-DBUILD_SHARED_LIBS=ON' || '-DBUILD_SHARED_LIBS=OFF' }}
          -DCMAKE_SYSTEM_NAME=Android
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake
          -DANDROID_ABI=${{ matrix.config.abi }}
          -DANDROID_PLATFORM=android-21
          -DBUILD_TESTING=ON
          -DEDF_BUILD_TOOLS=ON
          -DEDF_HIDDEN_VISIBILITY=ON
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_PREFIX }}

      - name: Build & Install
        run: |
          pushd build
          make install
          popd

      - name: Run file command
        run: file ./${{ env.INSTALL_PREFIX }}/lib/libEDFlib.*

      - name: Print exported symbols
        if: ${{ matrix.linkage == 'dynamic' }}
        run: |
          nm -CD ./${{ env.INSTALL_PREFIX }}/lib/libEDFlib.* 2>/dev/null || exit 0
          nm -CD ./${{ env.INSTALL_PREFIX }}/lib/libEDFlib.* 2>/dev/null | grep 'edf' | wc -l || exit 0
          nm -CD ./${{ env.INSTALL_PREFIX }}/lib/libEDFlib.* 2>/dev/null | wc -l || exit 0

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: EDFlib-${{ env.EDFLIB_VERSION }}-${{ matrix.config.rid }}-${{ matrix.linkage }}
          path: ${{ env.INSTALL_PREFIX }}

  build-apple:
    name: build-${{ matrix.config.rid }}-${{ matrix.linkage }}
    if: >-
      github.event.pull_request.draft == false
    runs-on: macOS-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - rid: ios-arm64
            os: OS64

          - rid: osx
            os: MAC_UNIVERSAL

          - rid: osx-arm64
            os: MAC_ARM64

          - rid: osx-x64
            os: MAC
        linkage: [ dynamic, static ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Clone EDFlib
        run: |
          git clone https://gitlab.com/Teuniz/EDFlib.git
          pushd EDFlib
          git checkout ${{ env.EDFLIB_VERSION }}
          popd

      - name: Copy CMakeLists.txt
        run: |
          cp CMakeLists.txt ./EDFlib

      - name: Run uname
        run: uname -a

      - name: Configure
        run: >
          cmake
          -S EDFlib
          -B build
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/toolchains/ios-cmake/ios.toolchain.cmake
          -DENABLE_VISIBILITY=ON
          -DPLATFORM=${{ matrix.config.os }}
          ${{ matrix.linkage == 'dynamic' && '-DBUILD_SHARED_LIBS=ON' || '-DBUILD_SHARED_LIBS=OFF' }}
          -DBUILD_TESTING=OFF
          -DEDF_BUILD_TOOLS=OFF
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_PREFIX }}

      - name: Build & Install
        run: |
          pushd build
          make install
          popd

      - name: Run file command
        run: file ./${{ env.INSTALL_PREFIX }}/lib/libEDFlib.*

      - name: Print exported symbols
        if: ${{ matrix.linkage == 'dynamic' }}
        run: |
          nm -gU ./${{ env.INSTALL_PREFIX }}/lib/libEDFlib.* 2>/dev/null || exit 0
          nm -gU ./${{ env.INSTALL_PREFIX }}/lib/libEDFlib.* 2>/dev/null | grep 'edf' | wc -l || exit 0
          nm -gU ./${{ env.INSTALL_PREFIX }}/lib/libEDFlib.* 2>/dev/null | wc -l || exit 0

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: EDFlib-${{ env.EDFLIB_VERSION }}-${{ matrix.config.rid }}-${{ matrix.linkage }}
          path: ${{ env.INSTALL_PREFIX }}

  build-linux:
    name: build-linux-${{ matrix.arch.name }}-${{ matrix.linkage }}
    if: >-
      github.event.pull_request.draft == false
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        arch:
          - name: arm
            gcc: arm-linux-gnueabihf

          - name: arm64
            gcc: aarch64-linux-gnu

          - name: x64
            gcc: gcc
        linkage: [ dynamic, static ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone EDFlib
        run: |
          git clone https://gitlab.com/Teuniz/EDFlib.git
          pushd EDFlib
          git checkout ${{ env.EDFLIB_VERSION }}
          popd

      - name: Copy CMakeLists.txt
        run: |
          cp CMakeLists.txt ./EDFlib

      - name: Run uname
        run: uname -a

      - name: Install gcc ${{ matrix.arch.name }} toolchain
        if: ${{ matrix.arch.name == 'arm' || matrix.arch.name == 'arm64' }}
        run: |
          sudo apt-get update
          sudo apt-get install gcc-${{ matrix.arch.gcc }}
          echo "ARM_C_COMPILER=${{ matrix.arch.gcc }}-gcc" >> $GITHUB_ENV

      - name: Configure
        run: >
          cmake
          -S EDFlib
          -B build
          ${{ matrix.linkage == 'dynamic' && '-DBUILD_SHARED_LIBS=ON' || '-DBUILD_SHARED_LIBS=OFF' }}
          -DBUILD_TESTING=ON
          -DEDF_BUILD_TOOLS=ON
          -DEDF_HIDDEN_VISIBILITY=ON
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          ${{ matrix.arch.name == 'x64' && '-DCMAKE_C_COMPILER=gcc' || '-DCMAKE_C_COMPILER=$ARM_C_COMPILER' }}
          -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_PREFIX }}

      - name: Build & Install
        run: |
          pushd build
          make install
          popd

      - name: Run file command
        run: file ./${{ env.INSTALL_PREFIX }}/lib/libEDFlib.*

      - name: Print exported symbols
        if: ${{ matrix.linkage == 'dynamic' }}
        run: |
          nm -CD ./${{ env.INSTALL_PREFIX }}/lib/libEDFlib.* 2>/dev/null || exit 0
          nm -CD ./${{ env.INSTALL_PREFIX }}/lib/libEDFlib.* 2>/dev/null | grep 'edf' | wc -l || exit 0
          nm -CD ./${{ env.INSTALL_PREFIX }}/lib/libEDFlib.* 2>/dev/null | wc -l || exit 0

      - name: Run unit tests
        if: ${{ matrix.arch.name == 'x64' }}
        run: |
          pushd build
          make test
          popd

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: EDFlib-${{ env.EDFLIB_VERSION }}-linux-${{ matrix.arch.name }}-${{ matrix.linkage }}
          path: ${{ env.INSTALL_PREFIX }}

  build-linux-musl:
    name: build-linux-musl-${{ matrix.arch.name }}-${{ matrix.linkage }}
    if: >-
      github.event.pull_request.draft == false
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        arch:
          - name: arm64
            musl: aarch64-linux-musl-cross

          - name: x64
            musl: x86_64-linux-musl-cross
        linkage: [ dynamic, static ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone EDFlib
        run: |
          git clone https://gitlab.com/Teuniz/EDFlib.git
          pushd EDFlib
          git checkout ${{ env.EDFLIB_VERSION }}
          popd

      - name: Copy CMakeLists.txt
        run: |
          cp CMakeLists.txt ./EDFlib

      - name: Run uname
        run: uname -a

      - name: Install musl c
        run: |
          wget https://musl.cc/${{ matrix.arch.musl }}.tgz
          tar -xvzf ${{ matrix.arch.musl }}.tgz

      - name: Configure
        run: >
          cmake
          -S EDFlib
          -B build
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/toolchains/${{ matrix.arch.musl }}.cmake
          ${{ matrix.linkage == 'dynamic' && '-DBUILD_SHARED_LIBS=ON' || '-DBUILD_SHARED_LIBS=OFF' }}
          -DBUILD_TESTING=ON
          -DEDF_BUILD_TOOLS=ON
          -DEDF_HIDDEN_VISIBILITY=ON
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_PREFIX }}

      - name: Build & Install
        run: |
          pushd build
          make install
          popd

      - name: Run file command
        run: file ./${{ env.INSTALL_PREFIX }}/lib/libEDFlib.*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: EDFlib-${{ env.EDFLIB_VERSION }}-linux-musl-${{ matrix.arch.name }}-${{ matrix.linkage }}
          path: ${{ env.INSTALL_PREFIX }}

  build-windows:
    name: build-windows-${{ matrix.arch }}-${{ matrix.linkage }}
    if: >-
      github.event.pull_request.draft == false
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        arch: [ ARM, ARM64, Win32, x64 ]
        linkage: [ dynamic, static ]
        include:
          - generator: Visual Studio 17 2022

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone EDFlib
        run: |
          git clone https://gitlab.com/Teuniz/EDFlib.git
          pushd EDFlib
          git checkout ${{ env.EDFLIB_VERSION }}
          popd

      - name: Copy CMakeLists.txt
        run: |
          Copy-Item CMakeLists.txt -Destination .\EDFlib
        shell: pwsh

      - name: Configure
        run: >
          cmake
          -S EDFlib
          -B build
          -G "${{ matrix.generator }}"
          -A "${{ matrix.arch }},version=10.0.22621.0"
          ${{ matrix.linkage == 'dynamic' && '-DBUILD_SHARED_LIBS=ON' || '-DBUILD_SHARED_LIBS=OFF' }}
          -DBUILD_TESTING=ON
          -DEDF_BUILD_TOOLS=ON
          -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_PREFIX }}

      - name: Build & Install
        run: |
          cmake --build build --config ${{ env.BUILD_TYPE }} --target install

      - name: Run unit tests
        if: ${{ matrix.arch == 'Win32' || matrix.arch == 'x64' }}
        run: |
          pushd build
          ctest -C ${{ env.BUILD_TYPE }}
          popd

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: EDFlib-${{ env.EDFLIB_VERSION }}-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.linkage }}
          path: ${{ env.INSTALL_PREFIX }}

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [ build-android, build-apple, build-linux, build-linux-musl, build-windows ]

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: List downloaded files
        run: ls -R

      - name: Create archives
        run: |
          7z a EDFlib-v${{ github.ref_name }}-android-arm-dynamic.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-android-arm-dynamic/*
          7z a EDFlib-v${{ github.ref_name }}-android-arm-static.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-android-arm-static/*
          7z a EDFlib-v${{ github.ref_name }}-android-arm64-dynamic.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-android-arm64-dynamic/*
          7z a EDFlib-v${{ github.ref_name }}-android-arm64-static.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-android-arm64-static/*
          7z a EDFlib-v${{ github.ref_name }}-android-x64-dynamic.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-android-x64-dynamic/*
          7z a EDFlib-v${{ github.ref_name }}-android-x64-static.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-android-x64-static/*
          7z a EDFlib-v${{ github.ref_name }}-android-x86-dynamic.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-android-x86-dynamic/*
          7z a EDFlib-v${{ github.ref_name }}-android-x86-static.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-android-x86-static/*
          7z a EDFlib-v${{ github.ref_name }}-ios-arm64-dynamic.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-ios-arm64-dynamic/*
          7z a EDFlib-v${{ github.ref_name }}-ios-arm64-static.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-ios-arm64-static/*
          7z a EDFlib-v${{ github.ref_name }}-osx-dynamic.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-osx-dynamic/*
          7z a EDFlib-v${{ github.ref_name }}-osx-static.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-osx-static/*
          7z a EDFlib-v${{ github.ref_name }}-osx-arm64-dynamic.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-osx-arm64-dynamic/*
          7z a EDFlib-v${{ github.ref_name }}-osx-arm64-static.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-osx-arm64-static/*
          7z a EDFlib-v${{ github.ref_name }}-osx-x64-dynamic.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-osx-x64-dynamic/*
          7z a EDFlib-v${{ github.ref_name }}-osx-x64-static.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-osx-x64-static/*
          7z a EDFlib-v${{ github.ref_name }}-linux-arm-dynamic.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-linux-arm-dynamic/*
          7z a EDFlib-v${{ github.ref_name }}-linux-arm-static.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-linux-arm-static/*
          7z a EDFlib-v${{ github.ref_name }}-linux-arm64-dynamic.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-linux-arm64-dynamic/*
          7z a EDFlib-v${{ github.ref_name }}-linux-arm64-static.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-linux-arm64-static/*
          7z a EDFlib-v${{ github.ref_name }}-linux-musl-arm64-dynamic.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-linux-musl-arm64-dynamic/*
          7z a EDFlib-v${{ github.ref_name }}-linux-musl-arm64-static.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-linux-musl-arm64-static/*
          7z a EDFlib-v${{ github.ref_name }}-linux-musl-x64-dynamic.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-linux-musl-x64-dynamic/*
          7z a EDFlib-v${{ github.ref_name }}-linux-musl-x64-static.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-linux-musl-x64-static/*
          7z a EDFlib-v${{ github.ref_name }}-linux-x64-dynamic.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-linux-x64-dynamic/*
          7z a EDFlib-v${{ github.ref_name }}-linux-x64-static.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-linux-x64-static/*
          7z a EDFlib-v${{ github.ref_name }}-win-arm-dynamic.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-Windows-ARM-dynamic/*
          7z a EDFlib-v${{ github.ref_name }}-win-arm-static.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-Windows-ARM-static/*
          7z a EDFlib-v${{ github.ref_name }}-win-arm64-dynamic.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-Windows-ARM64-dynamic/*
          7z a EDFlib-v${{ github.ref_name }}-win-arm64-static.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-Windows-ARM64-static/*
          7z a EDFlib-v${{ github.ref_name }}-win-x86-dynamic.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-Windows-Win32-dynamic/*
          7z a EDFlib-v${{ github.ref_name }}-win-x86-static.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-Windows-Win32-static/*
          7z a EDFlib-v${{ github.ref_name }}-win-x64-dynamic.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-Windows-x64-dynamic/*
          7z a EDFlib-v${{ github.ref_name }}-win-x64-static.zip ./EDFlib-${{ env.EDFLIB_VERSION }}-Windows-x64-static/*

      - name: Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          generate_release_notes: true
          files: |
            EDFlib*.zip


# References:
# https://github.com/Yubico/libfido2/commit/8b28f05fddd60e7464eb1adb44991e840565e348
# >   # 10.0.261000.0 appear to have dropped ARM32 support
# >   $CMAKE_SYSTEM_VERSION = "-DCMAKE_SYSTEM_VERSION='10.0.22621.0'"
# https://github.com/Yubico/libfido2/commit/fd729577d636a4f208fe7d8792392c7c7f1e69d0
# > While here, use the -A Arch,version= syntax since CMake may ignore CMAKE_SYSTEM_VERSION.
# > $Arch = "$Arch,version=$WinSDK"
# https://github.com/microsoft/vscode-cmake-tools/issues/3672
# > "architecture": "x64,version=10.0.19041.0",
# https://github.com/actions/runner-images/issues/10349
# https://github.com/actions/runner-images/issues/10981
# [2 issues with Windows SDK version selection](https://gitlab.kitware.com/cmake/cmake/-/issues/25413)
# https://cmake.org/cmake/help/latest/variable/CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION.html
# [How to set MSVC Target Platform Version with CMake?](https://stackoverflow.com/questions/45692367/how-to-set-msvc-target-platform-version-with-cmake)
# https://github.com/libjpeg-turbo/libjpeg-turbo/issues/572
# [Windows SDK 10.0.26100.0 dropped support for 32-bit ARM](https://github.com/zufuliu/notepad4/issues/839)
# [C++ Windows SDK version 10.0.22000.0 was not found](https://stackoverflow.com/questions/78427469/c-windows-sdk-version-10-0-22000-0-was-not-found)
# [How to pass latest Windows SDK version to CMake?](https://stackoverflow.com/questions/63612743/how-to-pass-latest-windows-sdk-version-to-cmake)
# https://github.com/actions/runner-images/blob/main/images/windows/Windows2025-Readme.md#installed-windows-sdks
